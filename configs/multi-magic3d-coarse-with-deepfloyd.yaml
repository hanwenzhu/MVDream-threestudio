name: "multi-magic3d-with-deepfloyd"
tag: "${rmspace:${system.prompt_processor.prompt},_}"
exp_root_dir: "outputs"
seed: 0

data_type: "random-camera-datamodule"
data:
  width: 256
  height: 256
  camera_distance_range: [0.8, 1.0]
  elevation_range: [0, 80]
  fovy_range: [15, 60]
  light_sample_strategy: "magic3d"
  eval_camera_distance: 3.0
  eval_fovy_deg: 40.

system_type: "multi-with-deepfloyd"
system:
  prompt: ???
  prompts: []

  geometry_type: "implicit-volume"
  geometry:
    radius: 1.
    normal_type: null

    density_bias: "blob_magic3d"
    density_activation: softplus
    density_blob_scale: 10.
    density_blob_std: 0.5

    pos_encoding_config:
      otype: HashGrid
      n_levels: 16
      n_features_per_level: 2
      log2_hashmap_size: 19
      base_resolution: 16
      per_level_scale: 1.447269237440378 # max resolution 4096

  material_type: "no-material"
  material:
    n_output_dims: 3
    color_activation: sigmoid

  background_type: "neural-environment-map-background"
  background:
    color_activation: sigmoid
    random_aug: true
    share_aug_bg: true

  renderer_type: "nerf-volume-renderer"
  renderer:
    radius: ${system.geometry.radius}
    num_samples_per_ray: 512

  prompt_processor_type: "stable-diffusion-prompt-processor"
  prompt_processor:
    pretrained_model_name_or_path: "stabilityai/stable-diffusion-2-1-base"
    prompt: ""  # not used (for now)
    negative_prompt: "ugly, bad anatomy, blurry, pixelated obscure, unnatural colors, poor lighting, dull, and unclear, cropped, lowres, low quality, artifacts, duplicate, morbid, mutilated, poorly drawn face, deformed, dehydrated, bad proportions"
    front_threshold: 30.
    back_threshold: 30.

  guidance_type: "stable-diffusion-guidance"
  guidance:
    pretrained_model_name_or_path: "stabilityai/stable-diffusion-2-1-base"
    weighting_strategy: uniform
    guidance_scale: 100.
    min_step_percent: 0.02
    max_step_percent: 0.98

  loggers:
    wandb:
      enable: false
      project: "threestudio"

  loss:
    # weight of IF in the loss
    # loss = (1 - lambda_if) * magic3d loss + lambda_if * IF loss
    lambda_if: 0.9
    # weight of intersection between geometries in the loss
    lambda_intersection: 10000.
    lambda_sds: 1.
    lambda_orient: 0.
    lambda_sparsity: 0.
    lambda_opaque: 0.
  optimizer:
    name: AdamW
    args:
      betas: [0.9, 0.99]
      eps: 1.e-15
    params:
      geometry:
        lr: 0.01
      background:
        lr: 0.001

trainer:
  max_steps: 10000
  log_every_n_steps: 1
  num_sanity_val_steps: 0
  val_check_interval: 200
  enable_progress_bar: true
  precision: 16-mixed

checkpoint:
  save_last: true
  save_top_k: -1
  every_n_train_steps: ${trainer.max_steps}
